generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id
  firstName String
  lastName  String
  job       String
  phone     String
  email     String
  isActive  Boolean
  createdAt DateTime
  loginId String? @unique
  role String
  login     Login? @relation(fields: [loginId], references: [id])
  sucursalId String
  sucursal Sucursal @relation(fields: [sucursalId], references: [id])
  points Point[]
  tasks Task[]
  permit Permit[] @relation("RequestedPermits")
  approvals Permit[] @relation("ApprovedPermits")
  modules PlatformPermission[]
}

model Module {
  id     String  @id @default(uuid())
  name   String @unique
  permit PlatformPermission[]
}

model PlatformPermission {
  id       String  @id @default(uuid()) // Identificador Ãºnico para el permiso
  userId   String
  moduleId String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  module   Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId]) // Un usuario no puede tener el mismo permiso duplicado
}

model Permit {
  id               String   @id
  type             String
  reason           String
  user             User     @relation("RequestedPermits", fields: [userId], references: [id])
  userId           String
  createdAt        DateTime @default(now())
  decitionTakenAt  DateTime?
  decitionTakenBy  User?    @relation("ApprovedPermits", fields: [decitionTakenById], references: [id])
  decitionTakenById String?
  status           String
  adminComment     String?
}

model Login {
  id           String @id
  email        String @unique
  passwordHash String
  passwordSalt String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User?
}

model Sucursal {
  id             String @id
  name           String
  address        String
  phone          String
  user User[]
  itineraries Itinerary[]
}

model Truck {
  id String @id
  plates String
  model String
  brand String
  isActive Boolean @default(true)
  incidents Incident[]
}

model Incident {
  id String @id
  description String
  truck Truck @relation(fields: [truckId], references: [id])
  truckId String
  isActive Boolean
  startDate DateTime
  finishedDate DateTime
}

model Client {
  id String @id
  name String
  address String
  isActive Boolean
  points Point[]
}

model Survey {
  id String @id
  title String
  description String
  active Boolean
  questions Question[]
  responses SurveyResponse[]
  points Point[]
}

model Question {
  id String @id
  text String
  order Int
  surveyId String
  survey Survey @relation(fields: [surveyId], references: [id])
  type String
  options QuestionOption[]
  answers AnswerQuestion[]
}

model QuestionOption {
  id String @id
  value String
  order Int
  questionId String
  question Question @relation(fields: [questionId], references: [id])
  answerOption AnswerOption[]
}

model SurveyResponse {
  id String @id
  surveyId String
  survey Survey  @relation(fields: [surveyId], references: [id])
  point Point?
  answers AnswerQuestion[]
}

model AnswerQuestion {
  id String @id
  responseId String
  response SurveyResponse @relation(fields: [responseId], references: [id])
  questionId String
  question Question @relation(fields: [questionId], references: [id])
  answer String
  answerOption AnswerOption[]
}

model AnswerOption {
  answerOptionId String @id
  answerId String
  answer AnswerQuestion @relation(fields: [answerId], references: [id])
  optionId String
  option QuestionOption @relation(fields: [optionId], references: [id])
}

model Department {
  id String @id
  name String
  tasks Task[]
  isActive Boolean @default(true)
}

model Task {
  id String @id
  title String
  description String
  userAssignedId String
  userAssigned User @relation(fields: [userAssignedId], references: [id])
  status String
  dueTo DateTime

  point Point?

  belongsToItinerary Boolean @default(false)

  departmentId String
  department Department @relation(fields: [departmentId], references: [id])

  @@index([status])
  @@index([dueTo])
  @@index([userAssignedId])
}


model Point {
  id String @id
  
  client Client @relation(fields: [clientId], references: [id])
  clientId String

  user User @relation(fields: [userId], references: [id])
  userId String
  
  invoices Invoce[]
  
  itineraryId String
  itinerary Itinerary @relation(fields: [itineraryId], references: [id])
  
  surveyId String?
  survey Survey? @relation(fields: [surveyId], references: [id])
  
  responseId String? @unique
  response SurveyResponse? @relation(fields: [responseId], references: [id])
  
  problem Boolean @default(false)
  
  comment String
  
  observation String

  certificate String
  
  ssa String
  
  type String
  
  status String

  task Task @relation(fields: [taskId], references: [id])
  taskId String @unique
}

model Invoce {
  invoceId String @id
  invoiceNumber String
  point Point @relation(fields: [pointId], references: [id])
  pointId String
}

model Itinerary {
  id String @id
  sucursal Sucursal @relation(fields: [sucursalId], references: [id])
  sucursalId String
  points Point[]
  createdAt DateTime
  updatedAt DateTime
  active Boolean
  done Boolean @default(false)
  scheduleDate DateTime
}
