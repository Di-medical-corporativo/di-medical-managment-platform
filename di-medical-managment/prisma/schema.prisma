generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@db/postgres"
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  birthDate DateTime
  NSS       String
  job       String
  picture   String
  phone     String
  email     String
  isActive  Boolean
  createdAt DateTime
  updatedAt DateTime
  loginId String? @unique
  login     Login? @relation(fields: [loginId], references: [id])
  sucursalId String? @unique
  sucursal Sucursal? @relation(fields: [sucursalId], references: [id])
  roles UserHasRole[]
  points Point[]
}

model Login {
  id           String   @id @default(uuid())
  email        String
  passwordHash String
  passwordSalt String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User?
}

model Sucursal {
  id             String @id @default(uuid())
  name           String
  address        String
  phone          String
  dimedicalBrand String
  user User?
  itineraries Itinerary[]
}

model Role {
  id              String            @id @default(uuid())
  name            String
  description     String
  resources ResourcesByRole[]
  users UserHasRole[]
}

model View {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String
  resources ViewByResource[]
}

model Resource {
  id              String            @id @default(uuid())
  name            String
  description     String
  views  ViewByResource[]
  roles ResourcesByRole[]
}

model ViewByResource {
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String
  view       View     @relation(fields: [viewId], references: [id])
  viewId     String

  @@id([viewId, resourceId])
}

model ResourcesByRole {
  role      Role     @relation(fields: [roleId], references: [id])
  roleId     String
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String

  @@id([roleId, resourceId])
}

model UserHasRole {
  user User @relation(fields: [userId], references: [id])
  userId String
  role Role @relation(fields: [roleId], references: [id])
  roleId String

  @@id([userId, roleId])
}

model Truck {
  id String @id @default(uuid())
  plates String
  model String
  brand String
  picture String
  isActive Boolean @default(true)
  incidents Incident[]
  points Point[]
}

model Incident {
  id String @id @default(uuid())
  description String
  picture String
  truck Truck @relation(fields: [truckId], references: [id])
  truckId String
  isActive Boolean
  startDate DateTime
  finishedDate DateTime
}

model Client {
  id String @id @default(uuid())
  name String
  address String
  isActive Boolean
  points Point[]
}

model Point {
  id String @id @default(uuid())
  sign String
  client Client @relation(fields: [clientId], references: [id])
  clientId String
  truck Truck @relation(fields: [truckId], references: [id])
  truckId String
  user User @relation(fields: [userId], references: [id])
  userId String
  invoices Invoce[]
}

model Invoce {
  invoceId String @id @default(uuid())
  invoiceNumber String
  description String
  point Point @relation(fields: [pointId], references: [id])
  pointId String
}

model Itinerary {
  itineraryId String @id @default(uuid())
  sucursal Sucursal @relation(fields: [sucursalId], references: [id])
  sucursalId String
}
