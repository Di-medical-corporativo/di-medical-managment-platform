generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@db/postgres"
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  birthDate DateTime
  NSS       String
  job       String
  picture   String
  phone     String
  email     String
  isActive  Boolean
  createdAt DateTime
  updatedAt DateTime
  loginId String? @unique
  login     Login? @relation(fields: [loginId], references: [id])
  sucursalId String
  sucursal Sucursal @relation(fields: [sucursalId], references: [id])
  roles UserHasRole[]
  points Point[]
  tasks Task[]
}

model Login {
  id           String   @id @default(uuid())
  email        String @unique
  passwordHash String
  passwordSalt String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User?
}

model Sucursal {
  id             String @id @default(uuid())
  name           String
  address        String
  phone          String
  dimedicalBrand String
  user User[]
  itineraries Itinerary[]
}

model Role {
  id              String            @id @default(uuid())
  name            String
  description     String
  resources ResourcesByRole[]
  users UserHasRole[]
}

model Resource {
  id              String            @id @default(uuid())
  name            String
  description     String
  roles ResourcesByRole[]
}

model ResourcesByRole {
  role      Role     @relation(fields: [roleId], references: [id])
  roleId     String
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String

  @@id([roleId, resourceId])
}

model UserHasRole {
  user User @relation(fields: [userId], references: [id])
  userId String
  role Role @relation(fields: [roleId], references: [id])
  roleId String

  @@id([userId, roleId])
}

model Truck {
  id String @id @default(uuid())
  plates String
  model String
  brand String
  picture String
  isActive Boolean @default(true)
  incidents Incident[]
  points Point[]
}

model Incident {
  id String @id @default(uuid())
  description String
  picture String
  truck Truck @relation(fields: [truckId], references: [id])
  truckId String
  isActive Boolean
  startDate DateTime
  finishedDate DateTime
}

model Client {
  id String @id @default(uuid())
  name String
  address String
  isActive Boolean
  points Point[]
}

model Point {
  id String @id @default(uuid())
  sign String?
  client Client @relation(fields: [clientId], references: [id])
  clientId String
  truck Truck @relation(fields: [truckId], references: [id])
  truckId String
  user User @relation(fields: [userId], references: [id])
  userId String
  invoices Invoce[]
  itineraryId String?
  itinerary Itinerary? @relation(fields: [itineraryId], references: [id])
  surveyId String?
  survey Survey? @relation(fields: [surveyId], references: [id])
  responseId String? @unique
  response SurveyResponse? @relation(fields: [responseId], references: [id])
  done Boolean @default(false)
  problem Boolean @default(false)
  comment String?
}

model Invoce {
  invoceId String @id @default(uuid())
  invoiceNumber String
  description String?
  point Point @relation(fields: [pointId], references: [id])
  pointId String
}

model Itinerary {
  id String @id @default(uuid())
  sucursal Sucursal @relation(fields: [sucursalId], references: [id])
  sucursalId String
  points Point[]
  createdAt DateTime
  updatedAt DateTime
  active Boolean
  done Boolean @default(false)
  scheduleDate DateTime
}

model Survey {
  id String @id @default(uuid())
  name String
  description String
  startDate DateTime
  endDate DateTime
  active Boolean
  questions Question[]
  responses SurveyResponse[]
  points Point[]
}

model Question {
  id String @id @default(uuid())
  text String
  order Int
  surveyId String
  survey Survey @relation(fields: [surveyId], references: [id])
  typeId String
  type QuestionType @relation(fields: [typeId], references: [id])
  options QuestionOption[]
  answers AnswerQuestion[]
}

model QuestionType {
  id String @id @default(uuid())
  type String
  questions Question[]
}

model QuestionOption {
  id String @id @default(uuid())
  value String
  order Int
  questionId String
  quesion Question @relation(fields: [questionId], references: [id])
  answerOption AnswerOption[]
}

model SurveyResponse {
  id String @id @default(uuid())
  surveyId String
  survey Survey  @relation(fields: [surveyId], references: [id])
  point Point?
  beginDate DateTime
  endDate DateTime
  answers AnswerQuestion[]
}

model AnswerQuestion {
  id String @id @default(uuid())
  responseId String
  response SurveyResponse @relation(fields: [responseId], references: [id])
  questionId String
  question Question @relation(fields: [questionId], references: [id])
  answer String
  answerOption AnswerOption[]
}

model AnswerOption {
  answerOptionId String @id @default(uuid())
  answerId String
  answer AnswerQuestion @relation(fields: [answerId], references: [id])
  optionId String
  option QuestionOption @relation(fields: [optionId], references: [id])
}

model Task {
  id String @id
  title String
  description String
  userAssignedId String
  userAssigned User? @relation(fields: [userAssignedId], references: [id])
  userAssignedName String
  userAssgnedPicture String
  status String
  dueTo DateTime
  startedDate DateTime
  endDate DateTime
}
